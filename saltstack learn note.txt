1.Master与Minion认证
(1)、minion在第一次启动时，会在/etc/salt/pki/minion/（该路径在/etc/salt/minion里面设置）下自动生成minion.pem（private key）和 minion.pub（public key），然后将 minion.pub发送给master。
(2)、master在接收到minion的public key后，通过salt-key命令accept minion public key，这样在master的/etc/salt/pki/master/minions下的将会存放以minion id命名的 public key，然后master就能对minion发送指令了。
 
2.Master与Minion的连接
(1)、SaltStack master启动后默认监听4505和4506两个端口。4505（publish_port）为saltstack的消息发布系统，4506（ret_port）为saltstack客户端与服务端通信的端口。如果使用lsof 查看4505端口，会发现所有的minion在4505端口持续保持在ESTABLISHED状态。

http://www.ttlsa.com/saltstack/
http://docs.saltstack.cn/zh_CN/latest/

rpm -Uvh http://ftp.linux.ncsu.edu/pub/epel/6/i386/epel-release-6-8.noarch.rpm

server:
yum -y install salt-master
chkconfig salt-master on

echo interface: 192.168.1.10 >> /etc/salt/master
echo auto_accept: Ture >> /etc/salt/master #自动接收证书
service salt-master start
salt-key -A -y

salt-key -L
查看证书列表
salt-key -A
接受所有key

测试+内建命令：
https://docs.saltstack.com/en/latest/ref/modules/all/index.html
salt '*' test.ping
salt '*' network.interfaces
salt '*' disk.usage

-S 根据被控主机的IP地址或IP子网进行匹配
salt -S '192.168.0.0/16' test.ping
salt -S '192.168.1.11' test.ping

-E 正则表达式
salt -E '1+' test.ping

-L 指定主机
salt -L '11,12' test.ping

执行命令
salt '*' cmd.run "hostname" 

client：
yum -y install salt-minion
chkconfig salt-minion on

echo master: 192.168.1.10 >> /etc/salt/minion
echo id: 11 >> /etc/salt/minion #标示客户端

service salt-minion start


配置计划任务：
schedule:
  highstate:  #前面2个空格
    function: state.highstate #前面4个空格
    seconds: 30 #前面4个空格

配置组管理：
nodegroups:
    TEST1: 'L@JF1-TEST1-001,JF-TEST1-0[0-9][0-9]'	

salt -N TEST1 test.ping 

配置grains：
方法1.master上操作
mkdir -p /srv/salt/_grains
cd /srv/salt/_grains
vi mem.py

#!/usr/bin/env python
# -*- coding: utf-8 -*-

'''
Module for squid disk information by python
'''
import commands
import os

def cache():
    '''
    Return the memory usage information for volumes mounted on this minion
    '''
    grains={}
    m = commands.getoutput("free -g|awk '$0~/Mem/ {print$2+1}'")
    grains['mem_test']=int(m)

    return grains 

salt '*' saltutil.sync_grains #此命令会将_grains目录下的文件同步到minion服务器上面。
salt '*' sys.reload_modules  #如果需要更改模块，更改完成后，可以使用命令重载
salt '*' saltutil.sync_grains #saltstack对值做了cache,刷新grains的值

salt '*' grains.items # 查看所有grains信息
salt '*' grains.ls #列出grains的所有key
salt '*' grains.item mem_test # 查看所有mem_test信息
salt '11' grains.setval hello world #在master上给minion设置grain键值对,minion下会出现一个/etc/salt/grains 记录此值
salt -G 'roles:webserver' test.ping #根据默认的grain的结果来执行命令

方法2.client上操作
vi /etc/salt/minion 增加以下内容
grains:
  roles:
    - webserver
    - memcache
  deployment: datacenter4
  cabinet: 13
  cab_u: 14-15

配置pillar:
服务端：
mkdir /srv/pillar/
vi /srv/pillar/top.sls
base:
  '11':
    - sc
	
vi /srv/pillar/sc.sls 
cang: 1
shencan.net: 2
DF: 1111
12_1T:  cache_dir

salt '11' pillar.data

salt-api配置：
yum -y install salt-master salt-api

useradd -M -s /sbin/nologin salt
echo "12345678" | passwd salt --stdin

生成自签名证书(用于ssl)
cd  /etc/pki/tls/certs
# 生成自签名证书, 过程中需要输入key密码及RDNs
make testcert
cd /etc/pki/tls/private/
# 解密key文件，生成无密码的key文件, 过程中需要输入key密码，该密码为之前生成证书时设置的密码
openssl rsa -in localhost.key -out localhost_nopass.key

vi /etc/salt/master
rest_cherrypy:
 host: 0.0.0.0
 port: 8080
 debug: true
 disable_ssl: True
# disable_ssl: True
# static: /var/www/halite/halite
# app: /var/www/halite/halite/index.html
# ssl_crt: /etc/pki/tls/certs/localhost.crt
# ssl_key: /etc/pki/tls/private/localhost_nopass.key

external_auth:
   pam:
     salt:
     - .*
     - '@runner'
     - '@wheel'

测试:	 
salt -a pam \*  test.ping

curl -k https://192.168.38.10:8000/login -H "Accept: application/x-yaml" -d username='salt' -d password='12345678' -d eauth='pam'

firefox 插件RESTClient
{"eauth":"pam","password":"12345678","username":"saltstack"}